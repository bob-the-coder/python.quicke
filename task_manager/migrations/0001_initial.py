# Generated by Django 5.1.7 on 2025-03-31 21:53

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(default='')),
                ('model_name', models.CharField(max_length=255)),
                ('intro', models.TextField(default='')),
                ('is_overseer', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Directive',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('category', models.CharField(choices=[('PRAGMA', 'Pragma'), ('COMM', 'Communication'), ('IGN', 'Ignore'), ('CLEANCODE', 'Clean Code'), ('ZEN', 'Zen')], max_length=32)),
                ('value', models.TextField(unique=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContextBrief',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('summary', models.TextField()),
                ('version', models.CharField(default='v1.0', max_length=32)),
                ('fulfilled', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='context_briefs', to='task_manager.agent')),
            ],
            options={
                'ordering': ['-created_at', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(choices=[('ANALYZE_REQUIREMENTS', 'Analyze stakeholder requirements and feature requests'), ('EXTRACT_CONTEXT', 'Extract context into a structured brief from raw input'), ('DEFINE_ARCHITECTURE', 'Design high-level system or module architecture'), ('SCOPE_FEATURE', 'Define what functionality is in or out of scope'), ('PLAN_SPRINT', 'Break down goals into sprint-sized task sets'), ('PRIORITIZE_TASKS', 'Order tasks based on priority and dependency'), ('MAP_DEPENDENCIES', 'Identify and describe service, code, or data dependencies'), ('DEFINE_MODEL', 'Define a new database or data-transfer model'), ('UPDATE_MODEL', 'Add, remove, or change fields in an existing model'), ('DB_MIGRATION', 'Generate or write schema migration logic'), ('CREATE_ENDPOINT', 'Implement a new API endpoint or route'), ('BIND_ENDPOINT', 'Register endpoint into the routing system'), ('ADD_SERIALIZER', 'Create or update serializers for structured input/output'), ('INTEGRATE_MODULE', 'Wire up a reusable module or service'), ('DEFINE_VALIDATION', 'Create field-level or object-level validation rules'), ('SETUP_STATE', 'Establish state management or context handling logic'), ('IMPLEMENT_LOGIC', 'Write function/method-level business logic'), ('IMPLEMENT_HELPER', 'Add a utility or support function'), ('REFACTOR_CODE', 'Improve structure or readability without changing behavior'), ('REFINE_TYPES', 'Add or improve type annotations/interfaces'), ('FIX_LINT_ERRORS', 'Resolve code style or formatting issues'), ('FRONTEND_COMPONENT', 'Create a UI component or container'), ('FRONTEND_LOGIC', 'Wire user interactions or UI events to logic'), ('STYLE_COMPONENT', 'Style a UI component with CSS/Tailwind/etc'), ('CONNECT_FRONTEND_BACKEND', 'Link UI to API data sources'), ('HANDLE_FORM', 'Implement form logic, validation, and submission'), ('WRITE_UNIT_TESTS', 'Add tests for small, isolated units of logic'), ('WRITE_INTEGRATION_TESTS', 'Test the interaction between multiple parts'), ('DEFINE_FIXTURE', 'Add test or dev data fixtures'), ('DEBUG_AND_TRACE', 'Trace bugs and unexpected behavior'), ('ADMIN_UI', 'Create or extend admin dashboard interfaces'), ('CREATE_FAKE_DATA', 'Build seed/demo/mock data generators'), ('DOCUMENT_FEATURE', 'Describe feature behavior and constraints'), ('WRITE_TODO_FLAGS', 'Mark incomplete or missing code paths'), ('REVIEW_CODE', 'Perform manual code or behavior review'), ('ADD_LOGIC', 'Catch-all for adding functional logic not otherwise classified'), ('OTHER', 'Miscellaneous or uncategorized task')], max_length=64)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('review', 'In Review'), ('done', 'Done'), ('blocked', 'Blocked'), ('obsolete', 'Obsolete')], default='todo', max_length=32)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('checklist', models.JSONField(default=list)),
                ('output_expectation', models.TextField(blank=True)),
                ('locked', models.BooleanField(default=False)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to='task_manager.agent')),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='task_manager.contextbrief')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subtasks', to='task_manager.task')),
            ],
            options={
                'ordering': ['-created_at', 'status', 'title'],
            },
        ),
        migrations.CreateModel(
            name='TaskFeedback',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('content', models.TextField()),
                ('is_blocking', models.BooleanField(default=False)),
                ('submitted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedback_submitted', to='task_manager.agent')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='task_manager.task')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentDirective',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_directives', to='task_manager.agent')),
                ('directive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='directive_agents', to='task_manager.directive')),
            ],
            options={
                'ordering': ['agent', 'directive'],
                'unique_together': {('agent', 'directive')},
            },
        ),
        migrations.CreateModel(
            name='TaskDependency',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('dependent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by', to='task_manager.task')),
                ('depends_on', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unblocks', to='task_manager.task')),
            ],
            options={
                'unique_together': {('dependent', 'depends_on')},
            },
        ),
    ]
